{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"Welcome to Node\u2010Crawler's Wiki!","text":"<p>Welcome to the official wiki page of the Node-Crawler repository. This is your go-to resource for understanding and using this tool. Node-Crawler is a powerful, flexible, and easy-to-use web crawler, with a node-based editing system built on top of Next.js and React Flow.</p> <p>Here you'll find detailed documentation about each of the functionalities of this application and guides on how to extend the application to help you make the most out of Node-Crawler.</p>"},{"location":"#about-node-crawler","title":"About Node-Crawler","text":"<p>Node-Crawler is a highly customizable, Node-based web application for creating web crawlers and further processing and transforming the retrieved data. Users can build tailor-made web crawlers and manipulate and transform the collected data as needed. The output data format can be set to a wide range of formats including JSON, CSV, and various database formats.</p> <p> </p>"},{"location":"#project-goals-and-use-cases","title":"Project Goals and Use Cases","text":"<ul> <li>Node-based Editing: Users can create and edit their own crawler workflows by drag-and-dropping nodes.</li> <li>Data Transformation: The application supports a variety of data manipulation and transformation operations for cleaning and restructuring the gathered data.</li> <li>Data Export: The transformed data can be output in a variety of formats including JSON, CSV, and various database formats.</li> </ul>"},{"location":"#installation-guide","title":"Installation Guide","text":"<p>Make sure you have Node.js and npm installed on your system before you start.</p> <ol> <li>Clone the repository:</li> </ol> <pre><code>git clone https://github.com/MertenD/node-crawler.git\n</code></pre> <ol> <li>Navigate into the directory and install the dependencies:</li> </ol> <pre><code>cd node-crawler\nnpm install\n</code></pre> <ol> <li>Start the development server:</li> </ol> <pre><code>npm run dev\n</code></pre> <p>Now you should be able to see the web application on <code>http://localhost:3000</code> in your browser.</p>"},{"location":"extend-project/implementing-a-new-node/","title":"Implementing a New Node","text":"<p>Follow these steps when you need to create a new Node:</p>"},{"location":"extend-project/implementing-a-new-node/#step-1-add-the-node-to-the-nodetype-enum","title":"Step 1: Add the Node to the NodeType Enum","text":"<p>Next, add your newly created Node to the config/NodeType enum.</p>"},{"location":"extend-project/implementing-a-new-node/#step-2-create-the-new-node","title":"Step 2: Create the New Node","text":"<p>First, create a new file in the components/editor/pages/canvas/nodes directory. In this file, you will define the following elements:</p> <ol> <li> <p>Data Interface: Create a Data interface that stores all data the user can configure.</p> </li> <li> <p>Style Function: Create a Style function (using the <code>createNodeShapeStyle()</code> function), where you can customize the Node's appearance.</p> </li> <li> <p>Node Component: Create a Node component (using the <code>createNodeComponent()</code> function), which will be the Node on the canvas.</p> </li> <li> <p>Options Component: Create an Options component (using the <code>createOptionsComponent()</code> function), where the user can configure the Node's behavior.</p> </li> </ol> <p>You can use the following template to create a new Node:</p> <pre><code>// TODO: Replace [NAME] everywhere\n\n// --- Data ---\nexport interface [NAME]NodeData extends NodeData {\n    // TODO: Add data attributes here\n}\n\n// --- Style ---\nexport const [NAME]ShapeStyle = createNodeShapeStyle({\n    // TODO: Add additional CSS for the node's shape here\n})\n\n// --- Node ---\nexport const [NAME]Node = createNodeComponent&lt;[NAME]NodeData&gt;(\n    NodeType.[NAME]_NODE,\n    [NAME]ShapeStyle,\n    (id, selected, data) =&gt; {\n        // TODO: Place the node content here\n    }\n)\n\n// --- Options ---\nexport const [NAME]Options = createOptionsComponent&lt;[NAME]NodeData&gt;(\"Start\", ({ id, data, onDataUpdated }) =&gt; {\n    return // TODO: Place options here\n})\n</code></pre>"},{"location":"extend-project/implementing-a-new-node/#step-3-add-metadata-to-nodesinformationtsx","title":"Step 3: Add Metadata to NodesInformation.tsx","text":"<p>Add all metadata of the new Node to the config/NodesInformation.tsx file.</p>"},{"location":"extend-project/implementing-a-new-node/#step-4-add-connection-rules","title":"Step 4: Add Connection Rules","text":"<p>Define the connection rules for the new Node in the config/ConnectionRules.ts file.</p>"},{"location":"extend-project/implementing-a-new-node/#step-5-create-a-new-node-class-for-execution","title":"Step 5: Create a New Node Class for Execution","text":"<p>You need to create a new class in the engine/nodes directory. This class should extend the <code>BasicNode</code> interface. Below is a basic template for your reference:</p> <pre><code>// TODO: Replace [NAME]\nexport class Engine[NAME]Node implements BasicNode {\n    id: string;\n    nodeType: NodeType\n    data: // TODO\n\n    constructor(id: string, data: /* TODO */) {\n        this.id = id\n        this.nodeType = // TODO\n        this.data = data\n    }\n\n    async run() {\n        // Optional: Get inputs from previous nodes\n        const input = usePlayStore.getState().getInput(this.id, \"input\")\n\n        if (input) {\n            // TODO Put the logic of the node here\n\n            // Optional: Add downloadable file\n            usePlayStore.getState().addFile(/* TODO */)\n\n            // Optional: Make outputs accessable for the next node \n            usePlayStore.getState().addOutgoingPipelines(this.id, /* TODO */)\n\n            // Optional: Write to the log\n            usePlayStore.getState().writeToLog(/* TODO */)\n\n            // End with calling the next node\n            usePlayStore.getState().nextNode()\n        }\n    }\n}\n</code></pre>"},{"location":"extend-project/implementing-a-new-node/#step-6-add-node-transformation-logic","title":"Step 6: Add Node Transformation Logic","text":"<p>The final step involves adding the transformation logic for the node. This transformation will convert a React Flow Node into an instance of your newly created class from Step 5. To do this, navigate to the util/NodeMapTransformer.ts file and add a new case to the <code>getNodeFromType()</code> method where you create the instance.</p>"}]}